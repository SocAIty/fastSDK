from fastsdk.service_management import SocaityServiceAddress, RunpodServiceAddress, ReplicateServiceAddress
from fastsdk.settings import Global

import os


class FastSDK:
    """
    Base class to inherit from when creating a client stub (SDK) for a service.
    Subclasses are usually generated by the SDK generator.
    """
    def __init__(self, service_name_or_id: str, api_key: str = None):
        """
        service_name_or_id: Used to find the service in the service manager.
        api_key: Optional api key to use for the service. If not provided, it will be tried to be loaded from the environment variables.
        """
        self.service_definition = Global.service_manager.get_service(service_name_or_id)
        # try to get api key from global settings if not provided
        self.api_key = api_key or self._get_api_key()
        # This loads the service_def and creates the api_client and the file_handler in the ApiJobManager
        Global.api_job_manager.load_api_client(self.service_definition.id, self.api_key)

    def _get_api_key(self):
        # for global services
        if isinstance(self.service_definition.service_address, SocaityServiceAddress):
            return os.getenv("SOCAITY_API_KEY", None)
        elif isinstance(self.service_definition.service_address, RunpodServiceAddress):
            return os.getenv("RUNPOD_API_KEY", None)
        elif isinstance(self.service_definition.service_address, ReplicateServiceAddress):
            return os.getenv("REPLICATE_API_KEY", None)
            
        # for locals try by service_id
        return os.getenv(self.service_definition.id.upper() + "_API_KEY", None)

    def submit_job(self, endpoint_id: str, **kwargs):
        return Global.api_job_manager.submit_job(self.service_definition.id, endpoint_id, data=kwargs)
