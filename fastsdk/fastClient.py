from fastsdk.service_definition import SocaityServiceAddress, RunpodServiceAddress, ReplicateServiceAddress, ServiceDefinition
from fastsdk.fastSDK import FastSDK
import os

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from fastsdk.service_interaction.api_job_manager import APISeex


class FastClient:
    """
    Base class to inherit from when creating a client stub (SDK) for a service.
    Subclasses are usually generated by the SDK generator.
    """
    def __init__(self, service_name_or_id: str, api_key: str = None):
        """
        service_name_or_id: Used to find the service in the service manager.
        api_key: Optional api key to use for the service. If not provided, it will be tried to be loaded from the environment variables.
        """
        self.fsdk = FastSDK()   # its a signleton, so if it was already created, it will be reused with all the loaded services
        
        self.service_definition = self.fsdk.service_manager.get_service(service_name_or_id)
        # try to get api key from global settings if not provided
        self.api_key = api_key or self._get_api_key()
        # This loads the service_def and creates the api_client and the file_handler in the ApiJobManager
        self.fsdk.api_job_manager.load_api_client(self.service_definition.id, self.api_key)

    def _get_api_key(self):
        # for global services
        if isinstance(self.service_definition.service_address, SocaityServiceAddress):
            return os.getenv("SOCAITY_API_KEY", None)
        elif isinstance(self.service_definition.service_address, RunpodServiceAddress):
            return os.getenv("RUNPOD_API_KEY", None)
        elif isinstance(self.service_definition.service_address, ReplicateServiceAddress):
            return os.getenv("REPLICATE_API_KEY", None)
            
        # for locals try by service_id
        return os.getenv(self.service_definition.id.upper() + "_API_KEY", None)

    def submit_job(self, endpoint_id: str, **kwargs) -> 'APISeex':
        return self.fsdk.api_job_manager.submit_job(self.service_definition.id, endpoint_id, data=kwargs)


class DynamicFastClient(FastClient):
    """
    Create a fastClient from a service_definition directly instead of creating a sdk.py with the SDK generator.
    The service_definition is added (and stored) in the service manager.
    Do this, if you know all parameters of the service and you don't want a generated client_stub.
    """
    def __init__(self, service_spec: ServiceDefinition, api_key: str = None):
        """
        Args:
            service_spec: ServiceDefinition object to create client for
            api_key: Optional API key for the service
        """
        service_def = FastSDK().add_service(service_spec)
        super().__init__(service_def.id, api_key)


class TemporaryFastClient(DynamicFastClient):
    """
    This client will be removed from the service manager when the client is deleted.
    The service is temporarily added to the service manager during the lifetime of this client.
    """
    def __del__(self):
        """Remove the service from the service manager when client is deleted."""
        if self.service_definition and hasattr(self, 'fsdk'):
            try:
                self.fsdk.service_manager.remove_service(self.service_definition.id)
            except Exception:
                # Ignore errors during cleanup (e.g., if FastSDK is already destroyed)
                pass
