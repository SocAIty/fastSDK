from fastsdk.APISDK import BaseAPISDK
from fastsdk.service_management import ServiceManager
from media_toolkit import ImageFile, MediaFile, MediaList
from typing import Union


class testFace2Face(BaseAPISDK):
    """
    example generated Client
    This is usually generated by the SDK generator.
    It provides specialized methods for each endpoint.
    It submits jobs to the JobManager.
    It provides method specific hooks.
    """
    def __init__(self, api_key: str = None):
        super().__init__(service_name_or_id="face2face", api_key=api_key)

    def swap_img_to_img(self, source_img: Union[str, ImageFile], target_img: Union[str, ImageFile], enhance_face_model: str = "gpen_bfr_512", **kwargs):
        """
        Swap faces between two images.

        Args:
            source_img: Source image containing the face(s) to swap from
            target_img: Target image containing the face(s) to swap to
            enhance_face_model: Face enhancement model to use. Defaults to 'gpen_bfr_512'

        Returns:
            ImageFile: The resulting image with swapped faces
        """
        return self.submit_job("/swap-img-to-img", source_img=source_img, target_img=target_img, enhance_face_model=enhance_face_model, **kwargs)
    
    def swap_video_to_video(self, faces: Union[str, MediaFile, MediaList], media: Union[str, MediaFile, MediaList], enhance_face_model: str = "gpen_bfr_512", **kwargs):
        return self.submit_job("/swap-video-to-video", faces=faces, media=media, enhance_face_model=enhance_face_model, **kwargs)


def test_manual_face2face():
    # 1. load service definition from file
    service_definition = ServiceManager.add_service(
        spec_source="test/test_files/face2face.json", service_id="face2face", service_address="http://localhost:8020/"
    )
    assert service_definition is not None
    # 2. create client
    f2f = testFace2Face(api_key="test_api_key")
    # 3. submit job 
    swap_job = f2f.swap_img_to_img("test/test_files/test_face_1.jpg", "test/test_files/test_face_2.jpg")
    # 4. wait for result
    result = swap_job.wait_for_result()
    # 5. save result
    result.save("test/output/test_face_1_swapped.jpg")


# EndUsage:
if __name__ == "__main__":
    test_manual_face2face()
