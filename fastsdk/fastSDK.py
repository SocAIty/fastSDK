
from fastsdk.api_job_manager import ApiJobManager
from fastsdk.service_management import ServiceManager, SocaityServiceAddress, RunpodServiceAddress, ReplicateServiceAddress
from fastsdk.service_interaction.request.file_handler import FileHandler

import os


class FastSDK:
    """
    Base class to inherit from when creating a client stub (SDK) for a service.
    Subclasses are usually generated by the SDK generator.
    """
    def __init__(self, service_name_or_id: str, api_key: str = None, file_handler: FileHandler = None):
        self.service_definition = ServiceManager.get_service(service_name_or_id)
        # try to get api key from global settings if not provided
        self.api_key = api_key or self._get_api_key()

        # built the necessary components
        file_handler = file_handler or FileHandler()
        ApiJobManager.add_api_client(self.service_definition.id, api_key=self.api_key)
        ApiJobManager.add_file_handler(self.service_definition.id, file_handler)
        
    def _get_api_key(self):
        # for global services
        if isinstance(self.service_definition.service_address, SocaityServiceAddress):
            return os.getenv("SOCAITY_API_KEY", None)
        elif isinstance(self.service_definition.service_address, RunpodServiceAddress):
            return os.getenv("RUNPOD_API_KEY", None)
        elif isinstance(self.service_definition.service_address, ReplicateServiceAddress):
            return os.getenv("REPLICATE_API_KEY", None)
            
        # for locals try by service_id
        return os.getenv(self.service_definition.id.upper() + "_API_KEY", None)

    def submit_job(self, endpoint_id: str, **kwargs):
        return ApiJobManager.submit_job(self.service_definition.id, endpoint_id, data=kwargs)


